Write a query to calculate the average age of employees in each department.

SELECT d.id, d.name, AVG(e.age) AS average_age
FROM employees e
LEFT JOIN departments d ON e.department_id = d.id
GROUP BY d.id, d.name
ORDER BY average_age;

-- Write a query to find the department with the highest number of employees whose age is
above 40.

SELECT d.id, d.name, COUNT(e.id) AS employee_count
FROM employees e
LEFT JOIN departments d ON e.department_id = d.id
WHERE e.age >= 40
GROUP BY d.id, d.name
ORDER BY employee_count DESC
LIMIT 1;


-- Write a query to retrieve the count of employees who have in joined in last 100 days.

SELECT COUNT(*) AS recent_joins
FROM employees
WHERE joining_date >= CURDATE() - INTERVAL 100 DAY;


-- Write a query to update the joining date of all employees in the HR department to the
yesterday.
-- Write a query to retrieve the count of employees who have in joined in last 100 days.


-- Create departments table
CREATE TABLE departments (
id INT 
AUTO INCREMENT PRIMARY KEY ,
name VARCHAR(100)
);
-- Insert sample data into departments table
INSERT INTO departments (name) VALUES
('IT'),
('HR'),
('Finance'),
('Marketing'),
('Operations');
-- Create employees table
CREATE TABLE employees (
id INT AUTO
INCREMENT PRIMARY KEY ,
_
name VARCHAR(100),
age INT ,
department
id INT ,
_
joining_
date DATE,
FOREIGN KEY (department
_
id) REFERENCES departments(id)
);
-- Insert sample data into employees table with 10000 employees
INSERT INTO employees (name, age, department
_
id, joining_
date)
SELECT
CONCAT('Employee'
, numbers.number),
25 + MOD((tens.a-1) * 10 + (hundreds.a-1) * 100 + numbers.number*numbers.number, 30),
1 + MOD((tens.a-1) * 10 + (hundreds.a-1) * 100 + numbers.number, 5),
-- department
-- age between 25 and 54
id between 1 and 5
_
DATE
_
SUB(CURDATE(), INTERVAL (tens.a-1) * 10 + (hundreds.a-1) * 100 + numbers.number DAY) -- joining_
date within the last year
FROM
(SELECT 1 AS number
UNION ALL SELECT 2
UNION ALL SELECT 3
UNION ALL SELECT 4
UNION ALL SELECT 5
UNION ALL SELECT 6
UNION ALL SELECT 7
UNION ALL SELECT 8
UNION ALL SELECT 9
UNION ALL SELECT 10) AS numbers
CROSS JOIN
(SELECT 1 AS a
UNION ALL SELECT 2
UNION ALL SELECT 3
UNION ALL SELECT 4
UNION ALL SELECT 5
UNION ALL SELECT 6
UNION ALL SELECT 7
UNION ALL SELECT 8
UNION ALL SELECT 9
UNION ALL SELECT 10) AS tens
CROSS JOIN
(SELECT 1 AS a
UNION ALL SELECT 2
UNION ALL SELECT 3
UNION ALL SELECT 4
UNION ALL SELECT 5
UNION ALL SELECT 6
UNION ALL SELECT 7
UNION ALL SELECT 8
UNION ALL SELECT 9
UNION ALL SELECT 10) AS hundreds;
